<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="xyz.xcye.admin.dao.UserAccountDao">

    <resultMap id="userAccountResultMap" type="xyz.xcye.common.entity.table.UserAccountDO">
        <result column="is_account_locked" property="accountLocked"/>
        <result column="is_account_expired" property="accountExpired"/>
    </resultMap>

    <insert id="insert">
        insert into au_user_account
        (
         uid,role,permission,is_account_locked,is_account_expired,user_uid,create_time,update_time
        )
        values
        (
         #{userAccountDO.uid},#{userAccountDO.role},#{userAccountDO.permission},
         #{userAccountDO.accountLocked},#{userAccountDO.accountExpired},#{userAccountDO.userUid},
         #{userAccountDO.createTime},#{userAccountDO.updateTime}
        )
    </insert>

    <update id="update">
        update au_user_account
        <set>
            <if test="userAccountDO.role != null">
                role=#{userAccountDO.role},
            </if>
            <if test="userAccountDO.permission != null">
                permission=#{userAccountDO.permission},
            </if>
            <if test="userAccountDO.accountLocked != null">
                is_account_locked=#{userAccountDO.accountLocked},
            </if>
            <if test="userAccountDO.accountExpired != null">
                is_account_expired=#{userAccountDO.accountExpired},
            </if>
            <if test="userAccountDO.updateTime != null">
                update_time=#{userAccountDO.updateTime},
            </if>
        </set>
        where uid=#{userAccountDO.uid}
    </update>

    <delete id="deleteByUid">
        delete
            au_user_account
        where
            uid=#{uid}
    </delete>

    <select id="queryAllByCondition" resultType="xyz.xcye.common.entity.table.UserAccountDO">
        select
        uid,role,permission,is_account_locked,is_account_expired,user_uid,create_time,update_time
        from
            au_user_account
        <where>
            <if test="condition.startTime != null and condition.endTime != null">
                and create_time between #{condition.startTime} and #{condition.endTime}
            </if>
            <if test="condition.uid != null">
                and uid=#{condition.uid}
            </if>
            <if test="condition.keyword != null">
                and `role` like concat('%', #{condition.keyword}, '%')
            </if>
            <if test="condition.otherUid != null">
                and user_uid=#{condition.otherUid}
            </if>
        </where>
    </select>
</mapper>